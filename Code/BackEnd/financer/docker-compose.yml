services:
  postgres:
    image: postgres:16-alpine
    container_name: financer-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  financer:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
    ports:
      - '${PORT}:3000'
      - '9229:9229'
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "if [ \"$$NODE_ENV\" = \"development\" ]; then npm run start:debug; else npm run start:prod; fi"
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
